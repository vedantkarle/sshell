<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <link rel="icon" href="https://i.ibb.co/Fb8mRSf/SShell-Logo1.png" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/fontawesome.min.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet" />
	<link type="text/css" rel="stylesheet" href="/css/ctf.css" />
    <title>SShell | CTF</title>
</head>

<body oncontextmenu="return false">
    <nav class="navbar navbar-expand-lg navbar-dark">
        <a class="navbar-brand" href="#" style="font-size: 30px;">S<span style="color: #1cceff;">SHELL</span></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="/home">Home</a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="/team">Our Team</a>
                </li>
    
                <li class="nav-item active">
                    <a class="nav-link" href="/contact">Contact us</a>
                </li>
    
            </ul>
            
        </div>
    </nav>
    <div id="progressbar"></div>
    <div id="scrollPath"></div>
    <div class="center">
        <h1><span>CTF</span></h1>
        <h2>Countdown Begins!</h2>
        <div id="clock"></div>
    </div>
    <br> <br><br><br><br><br><br><br><br>
    <div class="p-2 flex-shrink-1 bd-highlight ctf-map-mobile"  data-aos="fade-left"
        data-aos-delay="600">
        <img src="https://i.ibb.co/LvNJfFp/MAP.jpg" alt="">
    </div>
    <div class="d-flex bd-highlight" id="about" style="padding: 70px; background: rgba(0, 0, 0, 0);">
        <div class="p-2 w-100 bd-highlight" style="color: white;" data-aos="fade-right" data-aos-delay="300">
            <h1>
                About CTF Challenge
			</h1>
            <br>
		<p>
            Greetings hacker As you know United States has had very strong suspicions that
            China was lying and hiding something about the origins of covid-19 virus,turns out
            that the suspicion was right .A team of CIA spies who were dispersed into china
            province of Wuhan by AMERICAN GOVERNMENT to solve the theory have sent a report .
            The report says that in 2012 china had made its mind and passed a resolution to
            become superpower of the world and hence under OPERATION HAZARD it started
            developing a virus which was capable of human to human transmission and would
            generate a high death rate .China was creating an enemy so powerful that its
            destruction would cost humans trillions of dollars . This enemy was later named
            covid-19.While our spy was sending report to United states somehow china caught
            hold of him and got the information that US government knows about their blunder .
            Now it is an open war situation for China and US.We suspect that China is preparing
            its nuclear weapon Arsenal to bomb New York city of the US.You are the best Hacker
            known to the US government , so your job is to hack into the electronic systems and
            computers that regulate their Nuclear weapons and bring them down so that they loose
            their chance to use them . Millions of lives of US citizens are at stake and all
            comes down to you , get the job done my friend , there is no room for error !!
            </p>
            <button class="join"><a href="/CTF.html" style="color:white"><b> Register Free !!</b></a></button>


        </div>
        <div class="p-2 flex-shrink-1 bd-highlight ctf-map" style="border: 1px solid white; color: white;" data-aos="fade-left" data-aos-delay="600">
           <img src="https://i.ibb.co/LvNJfFp/MAP.jpg" alt="">
        </div>
    </div>


    <div class="features">
        <section class="section-services">
            <div class="container">
                <div class="row justify-content-center text-center">
                    <div class="col-md-10 col-lg-8">
                        <div class="header-section">
                            <h2 class="title">CTF<span>_Rules</span></h2>

                        </div>
                    </div>
                </div>
                <div class="row">
                    <!-- Start Single Service -->
                    <div class="col-md-6 col-lg-4" data-aos="fade-right"
        data-aos-delay="300">
                        <div class="single-service">
                            <div class="part-1">

                                <h3 class="title"><i class="fas fa-clipboard-check"></i>&nbsp;&nbsp;Rule 1.</h3>
                            </div>
                            <div class="part-2">
                                <p class="description">
                                    Do not attack CTF infrastructure.<br><br><br><br>
                                </p>

                            </div>
                        </div>
                    </div>
                    <!-- / End Single Service -->
                    <!-- Start Single Service -->
                    <div class="col-md-6 col-lg-4" data-aos="fade-right"
        data-aos-delay="600">
                        <div class="single-service">
                            <div class="part-1">

                                <h3 class="title"><i class="fas fa-clipboard-check"></i>&nbsp;&nbsp;Rule 2.</h3>
                            </div>
                            <div class="part-2">
                                <p class="description">
                                    No DoS, DDoS, brute-forcing, automated scans, or generating any large amount of
                                    traffc by any other means.
                                </p>


                            </div>
                        </div>
                    </div>
                    <!-- / End Single Service -->
                    <!-- Start Single Service -->
                    <div class="col-md-6 col-lg-4" data-aos="fade-right"
        data-aos-delay="900">
                        <div class="single-service">
                            <div class="part-1">

                                <h3 class="title"><i class="fas fa-clipboard-check"></i>&nbsp;&nbsp;Rule 3.</h3>
                            </div>
                            <div class="part-2">
                                <p class="description">
                                    Participants are NOT allowed to publish solutions during the course of the game .
                                    (blog, GitHub, Youtube, etc).<br><br>
                                </p>


                            </div>
                        </div>
                    </div>
                    <!-- / End Single Service -->
                    <!-- Start Single Service -->
                    <div class="col-md-6 col-lg-4" data-aos="fade-right"
        data-aos-delay="1200">
                        <div class="single-service">
                            <div class="part-1">

                                <h3 class="title"><i class="fas fa-clipboard-check"></i>&nbsp;&nbsp;Rule 4.</h3>
                            </div>
                            <div class="part-2">
                                <p class="description">
                                    Team Formation and Flag sharing are strictly prohibited .<br><br><br><br>
                                </p>


                            </div>
                        </div>
                    </div>
                    <!-- / End Single Service -->
                    <!-- Start Single Service -->
                    <div class="col-md-6 col-lg-4" data-aos="fade-right"
        data-aos-delay="1500">
                        <div class="single-service">
                            <div class="part-1">

                                <h3 class="title"><i class="fas fa-clipboard-check"></i>&nbsp;&nbsp;Rule 5.</h3>
                            </div>
                            <div class="part-2">
                                <p class="description">
                                    Any participants found violating the above rules will be disqualified from contest.
                                    Strict actions will be taken.<br><br><br>

                            </div>
                        </div>
                    </div>
                    <!-- / End Single Service -->
                </div>
            </div>
        </section>
    </div>
    <div class="container disclaimer" style="color: #eee;" data-aos="fade-up" data-aos-delay="300">
        <h5>**Disclaimer</h5>
        <p>The above problem statement has war theme to make it more interesting and enjoyable . It has nothing to do with real
        world scenario. This Site is for educational purpose only.</p>
    </div>
    <br>
    <br>
    <br>
    <div class="footer">
        <div class="inner-footer">
            <div class="footer-items">

                <a href="#"><img src="https://i.ibb.co/WH4Vgyr/SShell-Logo.png" alt="SShell-Logo" border="0"
                        class="sshell-logo-footer"></a>
            </div>

            <div class="footer-items">
                <h2>Quick Links</h2>
                <ul>
                    <a href="/">
                        <li>Home</li>
                    </a>

                    <a href="/team.html">
                        <li>Our Team</li>
                    </a>
                    <a href="/contact.html">
                        <li>Contact Us</li>
                    </a>
                </ul>
            </div>
            <div class="footer-items">
                <h1>Services</h1>
                <ul>
                    <a href="/labs.html">
                        <li>Labs</li>
                    </a>
                    <a href="/machines.html">
                        <li>Machines</li>
                    </a>
                    <a href="/CTF.html">
                        <li>CTF</li>
                    </a>
                </ul>
            </div>
            <div class="footer-items">
                <h1>Contact us</h1>
                <ul>
                    <li>
                        <i class="fa fa-map-marker-alt"></i>&nbsp;Mit-Wpu,Pune,India
                    </li>

                    <a href="mailto:info@sshell.in">
                        <li> <i style="color: white" class="fa fa-envelope"></i>&nbsp;info@sshell.in</li>
                    </a>

                </ul>
                <div class="social-media" style="color: white;">
                    <a href="https://www.youtube.com/channel/UC-hm8uB-YlyACUhf_nde5ng"><i
                            class="fab fa-youtube"></i></a>

                    <a href="https://www.instagram.com/sshell.in/"><i class="fab fa-instagram"></i></a>
                    <a href="https://www.linkedin.com/company/sshell"><i class="fab fa-linkedin-in"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            Copyright &copy; sshell.in 2020. All rights reserved.
        </div>
		</div>
        <script>
            let progress = document.getElementById("progressbar");
            let totalHeight = document.body.scrollHeight - window.innerHeight;
            window.onscroll = function () {
                let progressHeight = (window.pageYOffset / totalHeight) * 100;
                progress.style.height = progressHeight + "%";
            };
        </script>
            <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/Counter-Up/1.0.0/jquery.counterup.min.js"></script>
            <script src="cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
            <script src="http://cdnjs.cloudflare.com/ajax/libs/waypoints/2.0.3/waypoints.min.js"></script> -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
        <script>
             AOS.init({
                    easing: "ease",
                    duration: 1800,
                    once: true,
                });
        </script>
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
            integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
            crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"></script>
            <script src="https://code.jquery.com/jquery-3.5.1.min.js"
                integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
            <script>
                (function (factory) {
                    "use strict";

                    if (typeof define === "function" && define.amd) {
                        define(["jquery"], factory);
                    } else {
                        factory(jQuery);
                    }
                })(function ($) {
                    "use strict";

                    var instances = [],
                        matchers = [],
                        defaultOptions = {
                            precision: 100, // 0.1 seconds, used to update the DOM
                            elapse: false,
                            defer: false,
                        };
                    // Miliseconds
                    matchers.push(/^[0-9]*$/.source);
                    // Month/Day/Year [hours:minutes:seconds]
                    matchers.push(
                        /([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source
                    );
                    // Year/Day/Month [hours:minutes:seconds] and
                    // Year-Day-Month [hours:minutes:seconds]
                    matchers.push(
                        /[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source
                    );
                    // Cast the matchers to a regular expression object
                    matchers = new RegExp(matchers.join("|"));
                    // Parse a Date formatted has String to a native object
                    function parseDateString(dateString) {
                        // Pass through when a native object is sent
                        if (dateString instanceof Date) {
                            return dateString;
                        }
                        // Caste string to date object
                        if (String(dateString).match(matchers)) {
                            // If looks like a milisecond value cast to number before
                            // final casting (Thanks to @msigley)
                            if (String(dateString).match(/^[0-9]*$/)) {
                                dateString = Number(dateString);
                            }
                            // Replace dashes to slashes
                            if (String(dateString).match(/\-/)) {
                                dateString = String(dateString).replace(/\-/g, "/");
                            }
                            return new Date(dateString);
                        } else {
                            throw new Error(
                                "Couldn't cast `" + dateString + "` to a date object."
                            );
                        }
                    }
                    // Map to convert from a directive to offset object property
                    var DIRECTIVE_KEY_MAP = {
                        Y: "years",
                        m: "months",
                        n: "daysToMonth",
                        d: "daysToWeek",
                        w: "weeks",
                        W: "weeksToMonth",
                        H: "hours",
                        M: "minutes",
                        S: "seconds",
                        D: "totalDays",
                        I: "totalHours",
                        N: "totalMinutes",
                        T: "totalSeconds",
                    };
                    // Returns an escaped regexp from the string
                    function escapedRegExp(str) {
                        var sanitize = str
                            .toString()
                            .replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
                        return new RegExp(sanitize);
                    }
                    // Time string formatter
                    function strftime(offsetObject) {
                        return function (format) {
                            var directives = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
                            if (directives) {
                                for (var i = 0, len = directives.length; i < len; ++i) {
                                    var directive = directives[i].match(
                                        /%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/
                                    ),
                                        regexp = escapedRegExp(directive[0]),
                                        modifier = directive[1] || "",
                                        plural = directive[3] || "",
                                        value = null;
                                    // Get the key
                                    directive = directive[2];
                                    // Swap shot-versions directives
                                    if (DIRECTIVE_KEY_MAP.hasOwnProperty(directive)) {
                                        value = DIRECTIVE_KEY_MAP[directive];
                                        value = Number(offsetObject[value]);
                                    }
                                    if (value !== null) {
                                        // Pluralize
                                        if (modifier === "!") {
                                            value = pluralize(plural, value);
                                        }
                                        // Add zero-padding
                                        if (modifier === "") {
                                            if (value < 10) {
                                                value = "0" + value.toString();
                                            }
                                        }
                                        // Replace the directive
                                        format = format.replace(regexp, value.toString());
                                    }
                                }
                            }
                            format = format.replace(/%%/, "%");
                            return format;
                        };
                    }
                    // Pluralize
                    function pluralize(format, count) {
                        var plural = "s",
                            singular = "";
                        if (format) {
                            format = format.replace(/(:|;|\s)/gi, "").split(/\,/);
                            if (format.length === 1) {
                                plural = format[0];
                            } else {
                                singular = format[0];
                                plural = format[1];
                            }
                        }
                        // Fix #187
                        if (Math.abs(count) > 1) {
                            return plural;
                        } else {
                            return singular;
                        }
                    }
                    // The Final Countdown
                    var Countdown = function (el, finalDate, options) {
                        this.el = el;
                        this.$el = $(el);
                        this.interval = null;
                        this.offset = {};
                        this.options = $.extend({}, defaultOptions);
                        // console.log(this.options);
                        // This helper variable is necessary to mimick the previous check for an
                        // event listener on this.$el. Because of the event loop there might not
                        // be a registered event listener during the first tick. In order to work
                        // as expected a second tick is necessary, so that the events can be fired
                        // and handled properly.
                        this.firstTick = true;
                        // Register this instance
                        this.instanceNumber = instances.length;
                        instances.push(this);
                        // Save the reference
                        this.$el.data("countdown-instance", this.instanceNumber);
                        // Handle options or callback
                        if (options) {
                            // Register the callbacks when supplied
                            if (typeof options === "function") {
                                this.$el.on("update.countdown", options);
                                this.$el.on("stoped.countdown", options);
                                this.$el.on("finish.countdown", options);
                            } else {
                                this.options = $.extend({}, defaultOptions, options);
                            }
                        }
                        // Set the final date and start
                        this.setFinalDate(finalDate);
                        // Starts the countdown automatically unless it's defered,
                        // Issue #198
                        if (this.options.defer === false) {
                            this.start();
                        }
                    };
                    $.extend(Countdown.prototype, {
                        start: function () {
                            if (this.interval !== null) {
                                clearInterval(this.interval);
                            }
                            var self = this;
                            this.update();
                            this.interval = setInterval(function () {
                                self.update.call(self);
                            }, this.options.precision);
                        },
                        stop: function () {
                            clearInterval(this.interval);
                            this.interval = null;
                            this.dispatchEvent("stoped");
                        },
                        toggle: function () {
                            if (this.interval) {
                                this.stop();
                            } else {
                                this.start();
                            }
                        },
                        pause: function () {
                            this.stop();
                        },
                        resume: function () {
                            this.start();
                        },
                        remove: function () {
                            this.stop.call(this);
                            instances[this.instanceNumber] = null;
                            // Reset the countdown instance under data attr (Thanks to @assiotis)
                            delete this.$el.data().countdownInstance;
                        },
                        setFinalDate: function (value) {
                            this.finalDate = parseDateString(value); // Cast the given date
                        },
                        update: function () {
                            // Stop if dom is not in the html (Thanks to @dleavitt)
                            if (this.$el.closest("html").length === 0) {
                                this.remove();
                                return;
                            }
                            var now = new Date(),
                                newTotalSecsLeft;
                            // Create an offset date object
                            newTotalSecsLeft = this.finalDate.getTime() - now.getTime(); // Millisecs
                            // Calculate the remaining time
                            newTotalSecsLeft = Math.ceil(newTotalSecsLeft / 1000); // Secs
                            // If is not have to elapse set the finish
                            newTotalSecsLeft =
                                !this.options.elapse && newTotalSecsLeft < 0
                                    ? 0
                                    : Math.abs(newTotalSecsLeft);
                            // Do not proceed to calculation if the seconds have not changed or
                            // during the first tick
                            if (this.totalSecsLeft === newTotalSecsLeft || this.firstTick) {
                                this.firstTick = false;
                                return;
                            } else {
                                this.totalSecsLeft = newTotalSecsLeft;
                            }
                            // Check if the countdown has elapsed
                            this.elapsed = now >= this.finalDate;
                            // Calculate the offsets
                            this.offset = {
                                seconds: this.totalSecsLeft % 60,
                                minutes: Math.floor(this.totalSecsLeft / 60) % 60,
                                hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
                                days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                                daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                                daysToMonth: Math.floor(
                                    (this.totalSecsLeft / 60 / 60 / 24) % 30.4368
                                ),
                                weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
                                weeksToMonth:
                                    Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
                                months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
                                years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                                totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
                                totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
                                totalMinutes: Math.floor(this.totalSecsLeft / 60),
                                totalSeconds: this.totalSecsLeft,
                            };
                            // Dispatch an event
                            if (!this.options.elapse && this.totalSecsLeft === 0) {
                                this.stop();
                                this.dispatchEvent("finish");
                            } else {
                                this.dispatchEvent("update");
                            }
                        },
                        dispatchEvent: function (eventName) {
                            var event = $.Event(eventName + ".countdown");
                            event.finalDate = this.finalDate;
                            event.elapsed = this.elapsed;
                            event.offset = $.extend({}, this.offset);
                            event.strftime = strftime(this.offset);
                            this.$el.trigger(event);
                        },
                    });
                    // Register the jQuery selector actions
                    $.fn.countdown = function () {
                        var argumentsArray = Array.prototype.slice.call(arguments, 0);
                        return this.each(function () {
                            // If no data was set, jQuery.data returns undefined
                            var instanceNumber = $(this).data("countdown-instance");
                            // Verify if we already have a countdown for this node ...
                            // Fix issue #22 (Thanks to @romanbsd)
                            if (instanceNumber !== undefined) {
                                var instance = instances[instanceNumber],
                                    method = argumentsArray[0];
                                // If method exists in the prototype execute
                                if (Countdown.prototype.hasOwnProperty(method)) {
                                    instance[method].apply(instance, argumentsArray.slice(1));
                                    // If method look like a date try to set a new final date
                                } else if (
                                    String(method).match(/^[$A-Z_][0-9A-Z_$]*$/i) === null
                                ) {
                                    instance.setFinalDate.call(instance, method);
                                    // Allow plugin to restart after finished
                                    // Fix issue #38 (thanks to @yaoazhen)
                                    instance.start();
                                } else {
                                    $.error(
                                        "Method %s does not exist on jQuery.countdown".replace(
                                            /\%s/gi,
                                            method
                                        )
                                    );
                                }
                            } else {
                                // ... if not we create an instance
                                new Countdown(this, argumentsArray[0], argumentsArray[1]);
                            }
                        });
                    };
                });
            </script>
            <script>
                $("#clock").countdown("2020/6/20 16:00:00", function (event) {
                    let $this = $(this).html(
                        event.strftime(
                            "" +
                            "<div><span>%w</span><span>Weeks</span></div>" +
                            "<div><span>%d</span><span>Days</span></div>" +
                            "<div><span>%H</span><span>Hours</span></div>" +
                            "<div><span>%M</span><span>Minutes</span></div>" +
                            "<div><span>%S</span><span>Seconds</span></div>"
                        )
                    );
                });
            </script>

</body>

</html>