<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>sshell | Team</title>

    <!-- custom stylesheet -->
    <link rel="stylesheet" href="main.css" />

    <!-- font-awesome icons -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    />

    <!-- Jquery CDN -->
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>

	  <style>
	  	html, body {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
}

body {
      color: #fff;
      background: url("https://i.ibb.co/tPVVPjX/new.jpg") no-repeat 50% 50%;
      background-size: cover;
      overflow-x: hidden;
}

#wrap {
      width: 980px;
      left: -490px;
      top: 6%;
      margin-top: 52px;
      margin-left: 50%;
      position: relative;
}

#showcase {
      width: 100%;
      height: 460px;
}

#showcase img {
      cursor: pointer;
      opacity: 0.6;
}

#item-title {
      color: #fff;
      font-size: 30px;
      letter-spacing: 0.13em;
      text-align: center;
      margin-top: -20px;
      margin-bottom: 32px;
      font-family: monospace;
}

.nav {
      text-align: center;
}

.nav > button {
      width: 60px;
      height: 60px;
      color: #fff;
      text-align: center;
      background: #000;
      border: none;
      cursor: pointer;
}

.nav > button:focus {
      border: none;
      outline: none;
}
		  #sshell-logo{
			  width:40%;
		  }
		  .home{
			  color:#04a2fd;
			  text-decoration:none;
			  font-size:20px;
			  font-family: monospace;
		  }
	  </style>
  </head>
  <body>
    <div id="wrap">
		<a href="/home" class="home">Go Home</a>
      <div id="showcase">
		<img src="https://i.ibb.co/WH4Vgyr/SShell-Logo.png" alt="Sshell-Team" class="cloud9-item" id="sshell-logo">
        <img src="https://i.ibb.co/gTFMsfB/Alison.png" alt="Sujal" class="cloud9-item">
        <img src="https://i.ibb.co/QbBMX2m/Adam.png" alt="Varshit" class="cloud9-item">
        <img src="https://i.ibb.co/D96Y242/Blake.png" alt="Kanishk" class="cloud9-item">
        <img src="https://i.ibb.co/D96Y242/Blake.png" alt="Vedant" class="cloud9-item" />
        <img src="https://i.ibb.co/tZdNRQ8/Claire.png" alt="Sanchita" class="cloud9-item">
      </div>

      <p id="item-title">&nbsp;</p>

      <div class="nav noselect">
        <button class="left"><i class="fa fa-arrow-left"></i></button>
        <button class="right"><i class="fa fa-arrow-right"></i></button>
      </div>
    </div>
	
    <script type="text/javascript">
      $(function () {
        var showcase = $("#showcase");

        showcase.Cloud9Carousel({
          yPos: 42,
          yRadius: 48,
          mirrorOptions: {
            gap: 12,
            height: 0.2,
          },
          buttonLeft: $(".nav > .left"),
          buttonRight: $(".nav > .right"),
          autoPlay: true,
          bringToFront: true,

          onRendered: showcaseUpdated,
          onLoaded: function () {
            showcase.css("visibility", "visible");
            showcase.css("display", "none");
            showcase.fadeIn(1500);
          },
        });

        function showcaseUpdated(showcase) {
          var title = $("#item-title").html(
            $(showcase.nearestItem()).attr("alt")
          );

          var c = Math.cos((showcase.floatIndex() % 1) * 2 * Math.PI);
          title.css("opacity", 0.5 + 0.5 * c);
        }

        $(".nav > button").click(function (e) {
          var b = $(e.target).addClass("down");
          setTimeout(function () {
            b.removeClass("down");
          }, 80);
        });

        $(document).keydown(function (e) {
          switch (e.keyCode) {
            case 37:
              $(".nav > .left").click();
              break;

            case 39:
              $(".nav > .right").click();
          }
        });
      });
		
		/*!
	reflection.js for jQuery v1.12
	(c) 2006-2013 Christophe Beyls <http://www.digitalia.be>
	MIT-style license.
*/

;(function($) {

	$.fn.reflect = function(options) {
		options = $.extend({
			height: 1/3,
			opacity: 0.0
		}, options);

		return this.unreflect().each(function() {
			var img = this;
			if (/^img$/i.test(img.tagName)) {
				function doReflect() {
					var imageWidth = img.width, imageHeight = img.height, reflection, reflectionHeight, wrapper, context, gradient;
					reflectionHeight = Math.floor((options.height > 1) ? Math.min(imageHeight, options.height) : imageHeight * options.height);

					reflection = $("<canvas />")[0];
					if (reflection.getContext) {
						context = reflection.getContext("2d");
						try {
							$(reflection).attr({width: imageWidth, height: reflectionHeight});
							context.save();
							context.translate(0, imageHeight-1);
							context.scale(1, -1);
							context.drawImage(img, 0, 0, imageWidth, imageHeight);
							context.restore();
							context.globalCompositeOperation = "destination-out";

							gradient = context.createLinearGradient(0, 0, 0, reflectionHeight);
							gradient.addColorStop(0, "rgba(255, 255, 255, " + (1 - options.opacity) + ")");
							gradient.addColorStop(1, "rgba(255, 255, 255, 1.0)");
							context.fillStyle = gradient;
							context.rect(0, 0, imageWidth, reflectionHeight);
							context.fill();
						} catch(e) {
							return;
						}
					} else {
						if (!window.ActiveXObject) return;
						reflection = $("<img />").attr("src", img.src).css({
							width: imageWidth,
							height: imageHeight,
							marginBottom: reflectionHeight - imageHeight,
							filter: "FlipV progid:DXImageTransform.Microsoft.Alpha(Opacity=" + (options.opacity * 100) + ", FinishOpacity=0, Style=1, StartX=0, StartY=0, FinishX=0, FinishY=" + (reflectionHeight / imageHeight * 100) + ")"
						})[0];
					}
					$(reflection).css({display: "block", border: 0});

					wrapper = $(/^a$/i.test(img.parentNode.tagName) ? "<span />" : "<div />").insertAfter(img).append([img, reflection])[0];
					wrapper.className = img.className;
					$(img).data("reflected", wrapper.style.cssText = img.style.cssText);
					$(wrapper).css({width: imageWidth, height: imageHeight + reflectionHeight, overflow: "hidden"});
					img.style.cssText = "display: block; border: 0px";
					img.className = "reflected";
				}

				if (img.complete) doReflect();
				else $(img).load(doReflect);
			}
		});
	}

	$.fn.unreflect = function() {
		return this.unbind("load").each(function() {
			var img = this, reflected = $(this).data("reflected"), wrapper;

			if (reflected !== undefined) {
				wrapper = img.parentNode;
				img.className = wrapper.className;
				img.style.cssText = reflected;
				$(img).data("reflected", null);
				wrapper.parentNode.replaceChild(img, wrapper);
			}
		});
	}

})(window.jQuery || window.Zepto);

		/*
 * Cloud 9 Carousel
 *   Cleaned up, refactored, and improved version of CloudCarousel
 *
 * See the demo and get the latest version on GitHub:
 *   http://specious.github.io/cloud9carousel/
 *
 * Copyright (c) 2014 by Ildar Sagdejev ( http://twitter.com/tknomad )
 * Copyright (c) 2011 by R. Cecco ( http://www.professorcloud.com )
 * MIT License
 *
 * Please retain this copyright header in all versions of the software
 *
 * Requires:
 *  - jQuery 1.3.0 or later -OR- Zepto 1.1.1 or later
 *
 * Optional (jQuery only):
 *  - Reflection support via reflection.js plugin by Christophe Beyls
 *     http://www.digitalia.be/software/reflectionjs-for-jquery
 *  - Mousewheel support via mousewheel plugin
 *     http://plugins.jquery.com/mousewheel/
 */

;(function($) {
  var Item = function( image, mirrorOptions ) {
    image.item = this;
    this.image = image;
    this.fullWidth = image.width;
    this.fullHeight = image.height;
    this.alt = image.alt;
    this.title = image.title;

    $(image).css( 'position', 'absolute' );

    //
    // Generate reflection and wrap image and its reflection together in a div
    //
    if( mirrorOptions ) {
      this.reflection = $( $(this.image).reflect(mirrorOptions) ).next()[0];
      this.reflection.fullHeight = $(this.reflection).height();
      $(this.reflection).css('margin-top', mirrorOptions.gap + 'px');
      $(this.reflection).css('width', '100%');
      $(this.image).css('width', '100%');

      // Pass the item handle to the wrapper container
      this.image.parentNode.item = this.image.item;
    }

    this.moveTo = function( x, y, scale ) {
      this.width = this.fullWidth * scale;
      this.height = this.fullHeight * scale;
      this.x = x;
      this.y = y;
      this.scale = scale;

      var style = (mirrorOptions ? this.image.parentNode : this.image).style;
      style.width = this.width + "px";
      style.left = x + "px";
      style.top = y + "px";
      style.zIndex = "" + (scale * 100) | 0;

      if( mirrorOptions ) {
        var hGap = mirrorOptions.gap * scale;

        style.height = this.height + (this.reflection.fullHeight * scale) + "px";
        this.reflection.style.marginTop = hGap + "px";
      } else
        style.height = this.height + "px";
    }
  }

  var Carousel = function( container, options ) {
    var self = this;
    this.items = [];
    this.xCentre = (options.xPos === null) ? container.width() * 0.5  : options.xPos;
    this.yCentre = (options.yPos === null) ? container.height() * 0.1 : options.yPos;
    this.xRadius = (options.xRadius === null) ? container.width()/2.3 : options.xRadius;
    this.yRadius = (options.yRadius === null) ? container.height()/6  : options.yRadius;
    this.farScale = options.farScale;
    this.rotation = this.destRotation = Math.PI/2; // put the first item in front
    this.speed = options.speed;
    this.frameDelay = (1000/options.FPS) | 0;
    this.frameTimer = 0;
    this.autoPlayAmount = options.autoPlay;
    this.autoPlayDelay = options.autoPlayDelay;
    this.autoPlayTimer = 0;
    this.onLoaded = options.onLoaded;
    this.onRendered = options.onRendered;

    if( options.mirrorOptions ) {
      this.mirrorOptions = $.extend( {
        gap: 2
      }, options.mirrorOptions );
    }

    container.css( {position: 'relative', overflow: 'hidden'} );

    // Rotation:
    //  *      0 : right
    //  *   Pi/2 : front
    //  *   Pi   : left
    //  * 3 Pi/2 : back
    this.rotateItem = function( itemIndex, rotation ) {
      var item = this.items[itemIndex];
      var sin = Math.sin(rotation);
      var farScale = this.farScale;
      var scale = farScale + ((1-farScale) * (sin+1) * 0.5);

      item.moveTo(
        this.xCentre + (scale * ((Math.cos(rotation) * this.xRadius) - (item.fullWidth * 0.5))),
        this.yCentre + (scale * sin * this.yRadius),
        scale
      );
    }

    this.render = function() {
      var count = this.items.length;
      var spacing = 2 * Math.PI / count;
      var radians = this.rotation;

      for( var i = 0; i < count; i++ ) {
        this.rotateItem( i, radians );
        radians += spacing;
      }

      if( typeof this.onRendered === 'function' )
        this.onRendered( this );
    }

    this.playFrame = function() {
      var change = this.destRotation - this.rotation;

      if( Math.abs(change) < 0.001 ) {
        this.rotation = this.destRotation;
        this.pause();
      } else {
        this.rotation += change * this.speed;
        this.scheduleNextFrame();
      }

      this.render();
    }

    this.scheduleNextFrame = function() {
      this.frameTimer = setTimeout( function() { self.playFrame() }, this.frameDelay );
    }

    this.itemsRotated = function() {
      return this.items.length * ((Math.PI/2) - this.rotation) / (2*Math.PI);
    }

    this.floatIndex = function() {
      var floatIndex = this.itemsRotated() % this.items.length;
      return ( floatIndex < 0 ) ? floatIndex + this.items.length : floatIndex;
    }

    this.nearestIndex = function() {
      return Math.round( this.floatIndex() ) % this.items.length;
    }

    this.nearestItem = function() {
      return this.items[this.nearestIndex()];
    }

    this.play = function() {
      if( this.frameTimer === 0 )
        this.scheduleNextFrame();
    }

    this.pause = function() {
      clearTimeout( this.frameTimer );
      this.frameTimer = 0;
    }

    //
    // Spin the carousel.  Count is the number (+-) of carousel items to rotate
    //
    this.go = function( count ) {
      this.destRotation += (2 * Math.PI / this.items.length) * count;
      this.play();
    }

    this.deactivate = function() {
      this.pause();
      clearInterval( this.autoPlayTimer );
      options.buttonLeft.unbind( 'click' );
      options.buttonRight.unbind( 'click' );
      container.unbind( '.cloud9' );
    }

    this.autoPlay = function() {
      this.autoPlayTimer = setInterval(
        function() { self.go( self.autoPlayAmount ) },
        this.autoPlayDelay
      );
    }

    this.enableAutoPlay = function() {
      // Stop auto-play on mouse over
      container.bind( 'mouseover.cloud9', function() {
        clearInterval( self.autoPlayTimer );
      } );

      // Resume auto-play when mouse leaves the container
      container.bind( 'mouseout.cloud9', function() {
        self.autoPlay();
      } );

      this.autoPlay();
    }

    this.bindControls = function() {
      options.buttonLeft.bind( 'click', function() {
        self.go( -1 );
        return false;
      } );

      options.buttonRight.bind( 'click', function() {
        self.go( 1 );
        return false;
      } );

      if( options.mouseWheel ) {
        container.bind( 'mousewheel.cloud9', function( event, delta ) {
          self.go( (delta > 0) ? 1 : -1 );
          return false;
        } );
      }

      if( options.bringToFront ) {
        container.bind( 'click.cloud9', function( event ) {
          var hits = $(event.target).closest( '.' + options.itemClass );

          if( hits.length !== 0 ) {
            var idx = self.items.indexOf( hits[0].item );
            var count = self.items.length;
            var diff = idx - (self.floatIndex() % count);

            // Choose direction based on which way is shortest
            if( 2 * Math.abs(diff) > count )
              diff += (diff > 0) ? -count : count;

            self.destRotation = self.rotation;
            self.go( -diff );
          }
        } );
      }
    }

    var images = container.find( '.' + options.itemClass );

    this.finishInit = function() {
      //
      // Wait until all images have completely loaded
      //
      for( var i = 0; i < images.length; i++ ) {
        var im = images[i];
        if( (im.width === undefined) || ((im.complete !== undefined) && !im.complete) )
          return;
      }

      clearInterval( this.initTimer );

      // Init items
      for( i = 0; i < images.length; i++ )
        this.items.push( new Item( images[i], this.mirrorOptions ) );

      // Disable click-dragging of items
      container.bind( 'mousedown onselectstart', function() { return false } );

      if( this.autoPlayAmount !== 0 ) this.enableAutoPlay();
      this.bindControls();
      this.render();

      if( typeof this.onLoaded === 'function' )
        this.onLoaded( this );
    };

    this.initTimer = setInterval( function() { self.finishInit() }, 50 );
  }

  //
  // The jQuery plugin
  //
  $.fn.Cloud9Carousel = function( options ) {
    return this.each( function() {
      options = $.extend( {
        xPos: null,           // null: automatically calculated
        yPos: null,
        xRadius: null,
        yRadius: null,
        farScale: 0.5,        // scale of the farthest item
        mirrorOptions: false,
        FPS: 30,
        speed: 0.13,
        autoPlay: 0,          // [ 0: off | number of items (integer recommended, positive is clockwise) ]
        autoPlayDelay: 4000,
        mouseWheel: false,
        bringToFront: false,
        itemClass: 'cloud9-item',
        handle: 'carousel'
      }, options );

      var self = $(this);
      self.data( options.handle, new Carousel( self, options ) );
    } );
  }
})( window.jQuery || window.Zepto );
    </script>
  </body>
</html>
